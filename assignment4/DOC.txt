			+--------------------+
			|        CS39002    |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP 2----

Shubham Sahoo shubhamsomnath@gmail.com
Neeladri Das neeladridas1603@gmail.com


---- PRELIMINARIES ----

Additional References - 

1) https://www.ccs.neu.edu/home/skotthe/classes/cs5600/fall/2015/notes/pintos-project1.pdf


			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

-> IN thread.h

  
struct thread
{
  /* Owned by thread.c. */
  tid_t tid;                          /* Thread identifier. */
  enum thread_status status;          /* Thread state. */
  char name[16];                      /* Name (for debugging purposes). */
  uint8_t *stack;                     /* Saved stack pointer. */
  int priority;                       /* Priority. */
  struct list_elem allelem;           /* List element for all threads list. */
  int64_t wakeup_time;

  /* Shared between thread.c and synch.c. */
  struct list_elem elem;              /* List element. */
  struct list_elem timer_elem;    /* new struct member timer_elem */
  #ifdef USERPROG
  /* Owned by userprog/process.c. */
  uint32_t *pagedir;                  /* Page directory. */
  #endif

  /* Owned by thread.c. */
  unsigned magic;                     /* Detects stack overflow. */
};

-> IN thread.h

bool wakeup_inorder (const struct list_elem *left, const struct list_elem *right, void *aux UNUSED);

-> IN thread.c

bool
wakeup_inorder (const struct list_elem *left,
const struct list_elem *right, void *aux UNUSED)
{
  const struct thread *tleft = list_entry (left, struct thread, timer_elem);
  const struct thread *tright = list_entry (right, struct thread, timer_elem);

  if (tleft->wakeup_time != tright->wakeup_time)
    return tleft->wakeup_time < tright->wakeup_time;
  else
    return tleft->priority > tright->priority;
}


-> IN timer.c

void
timer_sleep (int64_t ticks) 
{

  /**** Interrupt design sleep ****/
  
  struct thread *th = thread_current();     // Current thread
  
  enum intr_level old_level;                // Create enumeration of interrupt level
  
  old_level = intr_disable();               // Disable the interrupt and assign the previous value
  ASSERT (intr_get_level () == INTR_OFF);

  th->wakeup_time = timer_ticks () + ticks;   // Set wakeup time for the thread
  
  list_insert_ordered(&timer_wait_list, &th->timer_elem, wakeup_inorder, NULL);  // Insert it with other 
                                                                                  //threads
  
  thread_block();                       // Block the execution of the thread
  intr_set_level (old_level);           // Reset the interrupt level to previous value
  
}


-> IN timer.c

static void
timer_interrupt (struct intr_frame *args UNUSED)
{
  ticks++;
  thread_tick ();

  /** Thread interrupt helper **/

  struct thread *th;

  enum intr_level old_level;            // Create enumeration of the interrupt level

  old_level = intr_disable ();          // Disable the interrupt service

  while (!list_empty (&timer_wait_list))    // Loop through the wait list of threads
  { 
    th = list_entry (list_front (&timer_wait_list), struct thread, timer_elem);   // Take the front thread
                                                                  // as this would have the least wakeup time
    if (ticks < th->wakeup_time)            // Check for time overflow
      break;
    
    thread_unblock(th);                     // Unblock the thread if time has passed
    list_pop_front (&timer_wait_list);      // Remove the thread from the list
  }
  
  intr_set_level (old_level);               // At last set the interrupt level to previous value
  
}

  

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

Ans : Once a call is made to the timer_sleep() function then the wakeup_time parameter of the thread is updated and the thread is put in a waiting list. After that the thread is blocked from execution. In the timer interrupt handler the waiting list is checked in a loop for processes that have crossed their time limits and the corresponding processes are unblocked.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

Ans : The processes in the waiting list are inserted in ordered fashion, so if a process's wakeup time didn't crossed the limit then the next processes are not checked.  

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

Ans : Inside the timer sleep the wakeup_time parameter is updated for each thread and the threads are put in the waiting list. So it does not matter which thread goes first inside the list, because they are always in ordered fashion. If some threads have same waiting time, then their position is decided according to their priorities.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

Ans : In the timer interrupt the full list is checked for the wakeup_time. So the race condition does not arise as the function checks all the threads' wakeup_time.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

Ans : This design avoids busy waiting. Also there are other designs which considers a sleeping state for the threads but this design works directly with the blocking state.

ADVANCED SCHEDULER
			  ==================

---- DATA STRUCTURES ----

void
thread_tick (void) 
{
  struct thread *t = thread_current();

	if (thread_mlfqs)
	{
		mlfqs_computations(t);
	}

	/* Update statistics. */
	if (t == idle_thread)
		idle_ticks++;
#ifdef USERPROG
	else if (t->pagedir != NULL)
		user_ticks++;
#endif
	else
		kernel_ticks++;

	//Wake up any threads sleeping
	//Wakes up all threads whose timer has expired
	if (initialised)
	{
		thread_wake();
	}

	/* Enforce preemption. */
	if (++thread_ticks >= TIME_SLICE)
intr_yield_on_return();
}
void thread_set_nice (int new_nice) 
{
  	enum intr_level original_interrupt_state = intr_disable();
	struct thread *t = thread_current();
	struct list_elem *e;

	validate_data(&new_nice, 2);
	t->nice = new_nice;

	t->priority = PRI_MAX - ( t->recent_cpu )/4 - 2 * t->nice;
	validate_data(&t->priority, 1);

	//Yield the current thread immediately if it's priority becomes less than
	//some other thread in ready list
	for (e = list_begin(&ready_list); e != list_end(&ready_list);
			e = list_next(e))
	{
		struct thread *t2 = list_entry(e, struct thread, elem);
		ASSERT(is_thread(t2));

		if (t2->priority > t->priority)
		{
			thread_yield();
		}

	}

int thread_get_nice (void) 
{
  return thread_current->nice;
}

/* Returns 100 times the system load average. */

int thread_get_load_avg (void) 
{
  enum intr_level original_interrupt_state = intr_disable();
	int value = load_avg * 100;
	intr_set_level(original_interrupt_state);
return value;
}

/* Returns 100 times the current thread's recent_cpu value. */

int thread_get_recent_cpu (void) 
{
  	struct thread *t = thread_current();
	enum intr_level original_interrupt_state = intr_disable();
	int value = (t->recent_cpu * 100);
	intr_set_level(original_interrupt_state);
	return value;
}

//mlfqs computations
inline void mlfqs_computations(struct thread *t)
{
	if (initialised)
	{
		int64_t current_ticks = timer_ticks();
		fixed_point_real_increment(&t->recent_cpu, 1);
		if ((current_ticks % TIMER_FREQ) == 0)
		{
			calculate_all();
		}
		if ((current_ticks % 4) == 0)
		{
			calculate_thread_priority_mlqfs(t);
		}
	}
}

inline void calculate_all()
{
	calculate_load_avg();
	calculate_recent_cpu();
	calculate_priority_mlfqs();
}

inline void calculate_load_avg()
{
	int ready_threads, coefficient;

	ready_threads = list_size(&ready_list);
	if (thread_current() != idle_thread)
	{
		ready_threads = ready_threads + 1;
	}

	

	load_avg = (59/60)*load_avg + (1/60)*ready_threads;

}
inline void calculate_recent_cpu()
{
	ASSERT(intr_get_level() == INTR_OFF);

	struct list_elem *e;
	int coefficient;

	for (e = list_begin(&all_list); e != list_end(&all_list); e = list_next(e))
	{
		struct thread *t = list_entry(e, struct thread, allelem);
		ASSERT(is_thread(t));

		t->recent_cpu = (2*load_avg)/(2*load_avg + 1) * recent_cpu + t->nice


	}
}
inline void calculate_priority_mlfqs()
{
	ASSERT(intr_get_level() == INTR_OFF);

	struct list_elem *e;

	for (e = list_begin(&all_list); e != list_end(&all_list); e = list_next(e))
	{
		struct thread *t = list_entry(e, struct thread, allelem);
		ASSERT(is_thread(t));

		calculate_thread_priority_mlqfs(t);
	}
}

inline void calculate_thread_priority_mlqfs(struct thread *t)
{
	ASSERT(intr_get_level() == INTR_OFF);
	t->priority = PRI_MAX - ( t->recent_cpu )/4 - 2*t->nice;
	validate_data(&t->priority, 1);
}

inline void validate_data(int *data, int type) //1-priority; 2-nice value
{
	switch (type)
	{
	case 1: //validate priority
		if (*data > PRI_MAX)
			*data = PRI_MAX;
		if (*data < PRI_MIN)
			*data = PRI_MIN;
		break;
	case 2:	//validate nice value
		if (*data > 20)
			*data = 20;
		if (*data < (-20))
			*data = -20;
		break;
	default:
		ASSERT(false)
		;
	}
}

inline void fixed_point_real_increment(int *original, int value)
{
	*original = ((*original) + (value));
}


---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?
